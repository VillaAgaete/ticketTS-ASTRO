---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../db/supabase';

// Fetch all tickets
const { data: tickets, error } = await supabase
  .from('tickets')
  .select('*')
  .order('id', { ascending: false });

if (error) {
  console.error('Error fetching tickets:', error);
}
---

<Layout title="Admin - Ticket Management">
  <h1>Ticket Management</h1>
  
  <div class="columns">
    <div class="column important" id="1">
      <h2>Importante</h2>
    </div>
    <div class="column medium" id="2">
      <h2>Medio</h2>
    </div>
    <div class="column mild" id="3">
      <h2>Leve</h2>
    </div>
  </div>
  
  <div id="0" class="column">
    <h2>New Tickets</h2>
  </div>
  
  <div id="9" class="column">
    <h2>Done Tickets</h2>
  </div>
  
  <button id="delete-done-tickets">Delete All Done Tickets</button>

  <script define:vars={{ tickets }}>
    function createTicketElement(ticket) {
      const ticketEl = document.createElement('div');
      ticketEl.className = 'ticket';
      ticketEl.draggable = true;
      ticketEl.dataset.id = ticket.id;

      let importanceColor;
      switch (ticket.importancia.toLowerCase()) {
        case 'importante':
          importanceColor = '#ff4d4d';
          break;
        case 'medio':
          importanceColor = '#ffd700';
          break;
        case 'leve':
          importanceColor = '#4da6ff';
          break;
        default:
          importanceColor = '#000000';
      }

      ticketEl.innerHTML = `
        <h3>${ticket.nombre}</h3>
        <p class="description">${ticket.descripcion}</p>
        <p>Departamento: ${ticket.departamento}</p>
        <p>Importancia: <span class="importance-text" style="color: ${importanceColor}; font-weight: bold;">${ticket.importancia}</span></p>
        <button class="mark-done">Mark as Done</button>
      `;

      Object.assign(ticketEl.style, {
        border: '2px solid #0d0202',
        borderRadius: '8px',
        padding: '15px',
        marginBottom: '10px',
        backgroundColor: '#ffffff',
        boxShadow: '0 2px 5px rgba(0,0,0,0.1)',
        cursor: 'move'
      });

      return ticketEl;
    }

    function addTicketToColumn(ticket, columnId) {
      const column = document.getElementById(columnId.toString());
      if (column) {
        const ticketEl = createTicketElement(ticket);
        column.appendChild(ticketEl);
      }
    }

    function displayTickets(tickets) {
      document.querySelectorAll('.ticket').forEach(t => t.remove());
      
      tickets.forEach(ticket => {
        addTicketToColumn(ticket, ticket.state);
      });
    }

    // Display initial tickets from the database
    displayTickets(tickets);

    let draggedTicket = null;

    document.querySelectorAll('.column').forEach(column => {
      column.addEventListener('dragover', e => {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
        const afterElement = getDragAfterElement(column, e.clientY);
        if (draggedTicket) {
          if (afterElement) {
            column.insertBefore(draggedTicket, afterElement);
          } else {
            column.appendChild(draggedTicket);
          }
        }
      });

      column.addEventListener('drop', e => {
        e.preventDefault();
        if (draggedTicket && column instanceof HTMLElement) {
          updateTicketStatus(draggedTicket.dataset.id, parseInt(column.id));
        }
        draggedTicket = null;
      });
    });

    document.addEventListener('dragstart', e => {
      if (e.target instanceof HTMLElement && e.target.classList.contains('ticket')) {
        draggedTicket = e.target;
        e.dataTransfer.effectAllowed = 'move';
        setTimeout(() => {
          e.target.style.display = 'none';
        }, 0);
      }
    });

    document.addEventListener('dragend', e => {
      if (e.target instanceof HTMLElement && e.target.classList.contains('ticket')) {
        e.target.style.display = 'block';
        draggedTicket = null;
      }
    });

    function getDragAfterElement(container, y) {
      const draggableElements = [...container.querySelectorAll('.ticket:not(.dragging)')];

      return draggableElements.reduce((closest, child) => {
        const box = child.getBoundingClientRect();
        const offset = y - box.top - box.height / 2;
        if (offset < 0 && offset > closest.offset) {
          return { offset: offset, element: child };
        } else {
          return closest;
        }
      }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    document.addEventListener('click', e => {
      if (e.target instanceof HTMLElement && e.target.classList.contains('mark-done')) {
        const ticket = e.target.closest('.ticket');
        const doneTickets = document.getElementById('9');
        if (ticket && doneTickets) {
          doneTickets.appendChild(ticket);
          updateTicketStatus(ticket.dataset.id || '', 9);
        }
      }
    });

    async function updateTicketStatus(ticketId, newState) {
      try {
        const response = await fetch('/api/update-ticket-status', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ ticketId, newState }),
        });
        if (!response.ok) throw new Error('Failed to update ticket status');
        console.log(`Updated ticket ${ticketId} to state ${newState}`);
      } catch (error) {
        console.error('Error updating ticket status:', error);
      }
    }

    document.getElementById('delete-done-tickets')?.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete all done tickets?')) {
        try {
          const response = await fetch('/api/delete-done-tickets', {
            method: 'POST',
          });
          if (!response.ok) throw new Error('Failed to delete done tickets');
          const doneTickets = document.getElementById('9');
          if (doneTickets) doneTickets.innerHTML = '<h2>Done Tickets</h2>';
        } catch (error) {
          console.error('Error deleting done tickets:', error);
        }
      }
    });
  </script>
</Layout>

<style>
  .columns {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
  }
  
  .column {
    flex: 1;
    min-height: 300px;
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
  }
  
  .important { background-color: #ffeeee; }
  .medium { background-color: #fff5ee; }
  .mild { background-color: #eef6ff; }

  #0, #9 {
    margin-top: 1rem;
  }

  #delete-done-tickets {
    margin-top: 1rem;
    background-color: #f44336;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
  }

  h2 {
    margin-top: 0;
  }

  .ticket {
    margin-bottom: 10px;
  }
</style>