---
// src/pages/admin.astro
import Layout from '../layouts/Layout.astro';
import { getAllTickets } from '../lib/db';

const initialTickets = getAllTickets();
---

<Layout title="Ticket Management">
  <h1>Ticket Management</h1>
  
  <div class="columns">
    <div class="column important" id="important">
      <h2>Importante</h2>
    </div>
    <div class="column medium" id="medium">
      <h2>Medio</h2>
    </div>
    <div class="column mild" id="mild">
      <h2>Leve</h2>
    </div>
  </div>
  
  <div id="new-tickets">
    <h2>New Tickets</h2>
  </div>
  
  <div id="done-tickets">
    <h2>Done Tickets</h2>
  </div>
  
  <button id="delete-done-tickets">Delete All Done Tickets</button>
</Layout>

<script define:vars={{ initialTickets }}>
  function createTicketElement(ticket) {
  const ticketEl = document.createElement('div');
  ticketEl.className = 'ticket';
  ticketEl.draggable = true;
  ticketEl.dataset.id = ticket.id;

  // Determine the color based on importance
  let importanceColor;
  switch (ticket.importance.toLowerCase()) {
    case 'importante':
      importanceColor = '#ff4d4d'; // Red
      break;
    case 'medio':
      importanceColor = '#ffd700'; // Yellow
      break;
    case 'leve':
      importanceColor = '#4da6ff'; // Light Blue
      break;
    default:
      importanceColor = '#000000'; // Black (default)
  }

  ticketEl.innerHTML = `
    <h3>${ticket.name}</h3>
    <p class="description">${ticket.description}</p>
    <p>Departamento: ${ticket.department}</p>
    <p>Importancia: <span class="importance-text" style="color: ${importanceColor}; font-weight: bold;">${ticket.importance}</span></p>
    <button class="mark-done">Mark as Done</button>
  `;
  
  // Apply styles to the ticket element
  Object.assign(ticketEl.style, {
    border: '2px solid #0d0202',
    borderRadius: '8px',
    width: '90%',
    padding: '15px',
    boxSizing: 'border-box',
    overflowWrap: 'break-word',
    wordWrap: 'break-word',
    wordBreak: 'break-word',
    hyphens: 'auto'
  });

  // Apply styles to the title (h3) and paragraphs
  const title = ticketEl.querySelector('h3');
  const paragraphs = ticketEl.querySelectorAll('p');

  if (title) {
    Object.assign(title.style, {
      marginTop: '0',
      overflowWrap: 'break-word',
      wordWrap: 'break-word',
      wordBreak: 'break-word',
      hyphens: 'auto'
    });
  }

  paragraphs.forEach(p => {
    Object.assign(p.style, {
      margin: '0.5em 0',
      overflowWrap: 'break-word',
      wordWrap: 'break-word',
      wordBreak: 'break-word',
      hyphens: 'auto'
    });
  });

  // Apply additional style to description for potential long text
  const description = ticketEl.querySelector('.description');
  if (description) {
    Object.assign(description.style, {
      maxHeight: '100px',
      overflowY: 'auto'
    });
  }

  return ticketEl;
}

  function addTicketToColumn(ticket, columnId) {
    const column = document.getElementById(columnId);
    if (column) {
      const ticketEl = createTicketElement(ticket);
      column.appendChild(ticketEl);
    }
  }

  function displayTickets(tickets) {
    // Clear existing tickets from all sections
    document.querySelectorAll('.ticket').forEach(t => t.remove());
    
    // Add fetched tickets
    tickets.forEach(ticket => {
      if (ticket.status === 'new') {
        addTicketToColumn(ticket, 'new-tickets');
      } else if (ticket.status === 'done') {
        addTicketToColumn(ticket, 'done-tickets');
      } else {
        addTicketToColumn(ticket, ticket.status);
      }
    });
  }

  // Display initial tickets
  displayTickets(initialTickets);

  // Add event listeners for drag and drop functionality
  document.querySelectorAll('.column, #new-tickets, #done-tickets').forEach(column => {
    column.addEventListener('dragover', e => e.preventDefault());
    column.addEventListener('drop', e => {
      e.preventDefault();
      const ticketId = e.dataTransfer.getData('text/plain');
      const ticket = document.querySelector(`[data-id="${ticketId}"]`);
      if (ticket && column instanceof HTMLElement) {
        column.appendChild(ticket);
        updateTicketStatus(ticketId, column.id);
      }
    });
  });

  document.addEventListener('dragstart', e => {
    if (e.target instanceof HTMLElement && e.target.classList.contains('ticket')) {
      e.dataTransfer.setData('text/plain', e.target.dataset.id || '');
    }
  });

  document.addEventListener('click', e => {
    if (e.target instanceof HTMLElement && e.target.classList.contains('mark-done')) {
      const ticket = e.target.closest('.ticket');
      const doneTickets = document.getElementById('done-tickets');
      if (ticket && doneTickets) {
        doneTickets.appendChild(ticket);
        updateTicketStatus(ticket.dataset.id || '', 'done');
      }
    }
  });

  async function updateTicketStatus(ticketId, newStatus) {
    try {
      const response = await fetch('/api/update-ticket-status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ ticketId, newStatus }),
      });
      if (!response.ok) throw new Error('Failed to update ticket status');
    } catch (error) {
      console.error('Error updating ticket status:', error);
    }
  }

  async function fetchTickets() {
    try {
      const response = await fetch('/api/get-tickets');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const tickets = await response.json();
      displayTickets(tickets);
    } catch (error) {
      console.error('Error fetching tickets:', error);
    }
  }

  // Fetch tickets every 30 seconds
  setInterval(fetchTickets, 30000);

  // Delete done tickets functionality
  document.getElementById('delete-done-tickets')?.addEventListener('click', async () => {
    if (confirm('Are you sure you want to delete all done tickets?')) {
      try {
        const response = await fetch('/api/delete-done-tickets', {
          method: 'POST',
        });
        if (!response.ok) throw new Error('Failed to delete done tickets');
        fetchTickets(); // Refresh the ticket display
      } catch (error) {
        console.error('Error deleting done tickets:', error);
      }
    }
  });
</script>

<style>
  .columns {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
  }
  
  .column {
    flex: 1;
    min-height: 300px;
    border: 1px solid #ccc;
    padding: 1rem;
    width: 30vw;
  }
  
  .important { background-color: #ffeeee; }
  .medium { background-color: #fff5ee; }
  .mild { background-color: #eef6ff; }

  .column, #new-tickets, #done-tickets {
    display: flex;
    flex-wrap: wrap;
    align-content: flex-start;
    gap: 0.75rem;
  }

  .ticket {
    border-radius: 8px;
    padding: 0.75rem;
    cursor: move;
    width: calc(50% - 0.375rem);
    box-sizing: border-box;
    width: 100px;
  }
  
  .ticket h3 {
    margin-top: 0;
    margin-bottom: 0.5rem;
  }

  .ticket p {
    margin: 0.25rem 0;
  }

  .mark-done {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    margin-top: 0.5rem;
    width: 100%;
    border-radius: 4px;
  }

  #delete-done-tickets {
    margin-top: 1rem;
    background-color: #f44336;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
    border-radius: 4px;
  }

  #new-tickets, #done-tickets {
    margin-top: 1rem;
    border: 1px solid #ccc;
    padding: 1rem;
  }

  #new-tickets h2, #done-tickets h2, .column h2 {
    width: 100%;
    margin-top: 0;
  }
</style>