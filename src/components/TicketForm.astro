---
// src/components/TicketForm.astro
---
<form id="ticketForm">
  <div>
    <label for="name">Nombre:</label>
    <input type="text" id="name" name="name" required>
  </div>
  
  <div>
    <label for="department">Departamento:</label>
    <select id="department" name="department" required>
      <option value="">Selecciona un departmento</option>
      <option value="Alcaldia">Alcaldía</option>
      <option value="Archivo">Archivo</option>
      <option value="Empleo">Empleo</option>
      <option value="Igualdad">Igualdad</option>
      <option value="Intervencion">Intervención</option>
      <option value="Juventud">Juventud</option>
      <option value="OficinaTecnica">Oficina Técnica</option>
      <option value="RecursosHumanos">Recursos Humanos</option>
      <option value="Registro">Registro</option>
      <option value="TrabajoSocial">Trabajo Social</option>
    </select>
  </div>
  
  <div>
    <label for="description">Descripción del problema:</label>
    <textarea id="description" name="description" required></textarea>
  </div>
  
  <div>
    <label for="importance">Importancia:</label>
    <select id="importance" name="importance" required>
      <option value="">Selecciona la importancia</option>
      <option value="importante">Importante</option>
      <option value="medio">Medio</option>
      <option value="leve">Leve</option>
    </select>
  </div>
  
  <button type="submit">Enviar Ticket</button>
</form>

<div id="message" class="message" style="display: none;"></div>


<div id="message" class="message" style="display: none;"></div>

<script>
  document.getElementById('ticketForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const messageElement = document.getElementById('message');

    try {
      console.log('Submitting form...');
      const response = await fetch('/api/submit-ticket', {
        method: 'POST',
        body: formData,
      });

      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      console.log('Response result:', result);
      
      if (messageElement) {
        messageElement.textContent = result.message;
        messageElement.style.display = 'block';
        messageElement.className = `message ${result.success ? 'success' : 'error'}`;
      }
      
      if (result.success) {
        form.reset();
      }
    } catch (error) {
      console.error('Error submitting ticket:', error);
      
      if (messageElement) {
        messageElement.textContent = 'An error occurred. Please try again.';
        messageElement.style.display = 'block';
        messageElement.className = 'message error';
      }
    }
  });
</script>

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 500px;
    margin: 0 auto;
  }
  
  label {
    font-weight: bold;
  }
  
  input, select, textarea {
    width: 100%;
    padding: 0.5rem;
  }
  
  button {
    padding: 0.5rem 1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }

  .message {
    margin-top: 1rem;
    padding: 0.5rem;
    background-color: #e6f3e6;
    border: 1px solid #4CAF50;
    border-radius: 4px;
  }
  .message.success {
    background-color: #e6f3e6;
    border: 1px solid #4CAF50;
  }
  .message.error {
    background-color: #fde6e6;
    border: 1px solid #ff0000;
  }
</style>